---
title: "Some good practices for research with R"
author: "Etienne Bacher"
date: "`r Sys.Date()`"
date-format: long
institute: "LISER"

format: 
 revealjs:
   incremental: false  
   theme: [night, custom.scss]
   pdf-separate-fragments: true
   strip-comments: true
   highlight-style: atom-one
   auto-animate-duration: 0.8
   code-copy: true
   slide-number: true
   
execute:
  eval: true
  echo: true
  cache: true
---

<br>

1. Validate your data with [`{validate}`](https://github.com/data-cleaning/validate)

<br>

2. Make your R environment reproducible with [`{renv}`](https://rstudio.github.io/renv/)

<br>

3. Make your paths reproducible with [`{here}`](https://here.r-lib.org/)

<br>

4. Keep a clean session


# Validate your data with `{validate}`

## Why?

<br><br>

Cleaning data can take hundreds or thousands of lines. 

<br>

Sometimes we do some mistakes that can have **big consequences**.

---

<div style="text-align: center">
<img src="img/retraction-article.png">
</div>


--- 

## What is `{validate}`?

<br><br>

`{validate}` is an R package whose goal is to ensure that your code has produced
the expected output.

<br>

It should be used on the final and on the intermediate datasets (basically anytime you do some big modifications).



## How to use `{validate}`?

<br>

1. Define a series of expectations, or ***rules***, with `validator()`

<br>

2. Pass your dataset through these rules with `confront()`

<br>

3. Check that all rules are respected.


## Example

Let's take the dataset `gapminder`, modify it a bit, and assume it's your output:

```{r}
library(gapminder)
library(countrycode)

gapminder$iso <- countrycode(gapminder$country, "country.name", "iso3c")

head(gapminder)
```

---

<br>

1. Define a series of expectations, or ***rules***, with `validator()`:

<br>

```{r}
library(validate)

rules <- validator(
  # Ensure that all ISO-3 codes have 3 letters
  field_length(iso, n = 3),
  
  # Ensure that there are no duplicated combination of iso-year
  is_unique(iso, year),
  
  # Ensure that year doesn't have any missing values
  !is.na(year)
)
```

--- 

<br>

2. Pass your dataset through these rules with `confront()`:

<br>

```{r}
x <- confront(gapminder, rules) 
x <- summary(x) 

x
```

---

<br>

3. Check that all rules are respected (or generate an error if there's a failing test):

<br>

```{r}
stopifnot(unique(x$fails) == 0)
```

---

Writing rules can be tedious, for example if you have a list of variables that should be positive (GDP, population, etc.).

<br>

Instead of writing `var1 >= 0`, `var2 >= 0`, ..., you can use `var_group()`:

```{r}
rules <- validator(
  positive_vars := var_group(lifeExp, pop, gdpPercap),
  positive_vars >= 0
)

x <- confront(gapminder, rules) |>
  summary() 

head(x)
```

---

<br><br>

There are a lot of other helpers:

* `in_range()`: useful for e.g percentages
* `field_format()` for regular expressions
* `is_linear_sequence()`: useful to check if there are some gaps in time series
* many others...

<br>

See more details in the [The Data Validation Cookbook](https://data-cleaning.github.io/validate/){.external target="_blank"}.


# Make your R environment reproducible with `{renv}`

---

## Packages in R

<br>

Packages make our life simpler by not having to reinvent the wheel.

<br>

. . .

But ***packages evolve!*** Between two versions of a same package:

* functions can be removed or renamed;
* function outputs can change in terms of results or display;
* function arguments can be moved, removed or renamed.

. . .

Moreover, packages can disappear if they are not supported anymore.

## Personal experience

<br>

I did my Master's thesis with R using ~30 packages in total.

<br>

Two months later, I couldn't run my code anymore because a package I used to extract some results slightly changed one of its arguments.

<br>

. . .

{{< fa arrow-right >}} &nbsp; Two lessons:

1. choose your packages wisely: better to use popular and actively developed packages;

2. use some tools to keep the version of the packages you used.


## Packages in R

<br>

Even the most used packages in R can change a lot over the years (e.g `tidyverse`).

<br>

It is ***your*** responsibility to make sure that your scripts are reproducible. If I take your script 4 years later, I should be able to run it.

<br>

Problem: how to deal with evolving packages?

## Solution

<br>

Take a snapshot of packages version using `{renv}`.

<br>

Idea: create a *lockfile* that contains the version of all the packages you used in a project, as well as their dependencies. 

. . .

<br>

When you give the project to someone else, they will be able to restore it with the exact same package versions.


## How does it work?

<br>

1. Initialize `{renv}` whenever you want with `init()`;

<br>

2. Work as usual;

<br>

3. Run `snapshot()` from time to time to update the lockfile;

<br>

4. If you come back to this project later, or if you share this project, run `restore()` to get the packages as they were when you used them.


## Example

Let's take the example of `gapminder` again. We import two packages, `gapminder` and `countrycode`:

```{r}
library(gapminder)
library(countrycode)

gapminder$iso <- countrycode(gapminder$country, "country.name", "iso3c")

head(gapminder)
```

---

1. Initialize `{renv}` whenever you want with `init()`:

```{r eval = FALSE}
renv::init()
```

<br>

```{.r}
* Initializing project ...
* Discovering package dependencies ... Done!
* Copying packages into the cache ... Done!
The following package(s) will be updated in the lockfile:

# CRAN ===============================
- R6            [* -> 2.5.1]
- base64enc     [* -> 0.1-3]
- bslib         [* -> 0.4.2]
- cachem        [* -> 1.0.6]
- cli           [* -> 3.5.0]
- countrycode   [* -> 1.4.0]
- digest        [* -> 0.6.31]
- ellipsis      [* -> 0.3.2]
- evaluate      [* -> 0.19]
- fansi         [* -> 1.0.3]
- fastmap       [* -> 1.1.0]
- fs            [* -> 1.5.2]
- gapminder     [* -> 0.3.0]
- glue          [* -> 1.6.2]
- highr         [* -> 0.10]
- htmltools     [* -> 0.5.4]
- jquerylib     [* -> 0.1.4]
- jsonlite      [* -> 1.8.4]
- lifecycle     [* -> 1.0.3]
- magrittr      [* -> 2.0.3]
- memoise       [* -> 2.0.1]
- mime          [* -> 0.12]
- pillar        [* -> 1.8.1]
- pkgconfig     [* -> 2.0.3]
- rappdirs      [* -> 0.3.3]
- renv          [* -> 0.16.0]
- rmarkdown     [* -> 2.19]
- sass          [* -> 0.4.4]
- settings      [* -> 0.2.7]
- stringi       [* -> 1.7.8]
- stringr       [* -> 1.5.0]
- tibble        [* -> 3.1.8]
- tinytex       [* -> 0.43]
- utf8          [* -> 1.2.2]
- validate      [* -> 1.1.1]
- vctrs         [* -> 0.5.1]
- xfun          [* -> 0.36]
- yaml          [* -> 2.3.6]

# GitHub =============================
- rlang         [* -> tidyverse/rlang@HEAD]

# https://yihui.r-universe.dev =======
- knitr         [* -> 1.41.8]

The version of R recorded in the lockfile will be updated:
- R             [*] -> [4.2.2]

* Lockfile written to 'C:/Users/etienne/Desktop/Divers/good-practices/renv.lock'.

Restarting R session...

* Project 'C:/Users/etienne/Desktop/Divers/good-practices' loaded. [renv 0.16.0]
```

---

<br> <br>

This will create:

* a file called `renv.lock`
* a folder called `renv`


<br>

{{< fa arrow-right >}} &nbsp; you shouldn't touch these files!


---

<br>

2. Work as usual. Let's import another package:

<br>

```{r eval = FALSE}
library(dplyr)
```

<br>

```{.r}
Error in library(dplyr) : there is no package called ‘dplyr’
```

<br>

Hum... weird, `dplyr` was installed on my laptop.

---

<br>

`{renv}` creates a sort of "local library" in your project, so you need to reinstall `dplyr` first:

<br>

```{r eval = FALSE}
install.packages("dplyr")
```

<br>

```{r}
library(dplyr)
```

---

<br>

Now that we imported a new package, let's see the status of `{renv}`:

```{r eval = FALSE}
renv::status()
```

<br>

```{.r}
The following package(s) are installed but not recorded in the lockfile:
             _
  withr        [2.5.0]
  dplyr        [1.0.10]
  generics     [0.1.3]
  tidyselect   [1.2.0]

Use `renv::snapshot()` to add these packages to your lockfile.
```

---

<br>

3. Run `snapshot()` from time to time to update the lockfile;

```{r eval = FALSE}
renv::snapshot()
```

<br>

```{.r}
The following package(s) will be updated in the lockfile:

# CRAN ===============================
- dplyr        [* -> 1.0.10]
- generics     [* -> 0.1.3]
- tidyselect   [* -> 1.2.0]
- withr        [* -> 2.5.0]

Do you want to proceed? [y/N]: Y
* Lockfile written to 'C:/Users/etienne/Desktop/Divers/good-practices/renv.lock'.
```

## Good to know

<br> <br>

**`{renv}` is not a panacea for reproducibility**.

<br>

If you use some packages that depend on external software (e.g `RSelenium` uses Java), `{renv}` cannot install this software for you.

<br>

Learn more about `{renv}` capabilities and limitations on [the package's website](https://rstudio.github.io/renv){.external target="_blank"}.


# Make your paths reproducible with `{here}`

## Paths

<br> <br>

Paths are the devil of reproducibility.

<br>

You can use as many best practices as you want, if you use ***absolute paths***, it is useless.


## Paths

<br><br>

**Absolute path:** path that is specific to your computer because it starts *at the root of a computer*.

Ex: "C:/Users/etienne/Desktop/myproject/mydata/WDI"

. . .

<br>

**Relative path:** path that is specific to a project because it starts *at the root of the project*.

Ex: "mydata/WDI"

## Relative paths in R

<br>

Use the package `{here}`:

<br>

* to know the working directory:

```{r eval = TRUE}
here::here()
```

<br>

* to use some data, script, etc.:

```{r eval=TRUE}
mydata <- read.csv(here::here("data/WDI/gapminder.csv"))
```

## Relative paths in R

<br> <br>

The only path in my script is "data/WDI/gapminder.csv".

<br>

Therefore, if I give the folder "good-practices" to someone else:

* the output of `here::here()` will change because the location of the folder on the computer changed.

* but my code will still run because the path to the data inside the folder didn't change.

## Relative paths in R

<br>

More advantages: 

* `{here}` will also work in you open the script outside of an RStudio project

* `{here}` will work on all operating systems (e.g no paths problems because of Windows or Mac).

<br>

Get more info on `{here}` on [the package's website](https://here.r-lib.org/){.external target="_blank"}.


# Keep a clean session

## Remove all objects

<br><br>

Last but not least: how do you ensure your code will run in a fresh session on another laptop?

<br>

If you already use `rm(list = ls())` at the beginning of your script...

<br>

. . .

... **you're wrong**


## Problem

<br>

What does `rm(list = ls())` do?

* `rm()`: remove objects from the environment

* `ls()`: list all objects in the environment

<br>

So `rm(list = ls())` removes all the objects from the environment: datasets, lists, etc.

<br>

. . .

What about loaded packages? What about options set with `options()`?


## Problem

<br>

`rm(list = ls())` does NOT create a fresh R session. Try it yourself:

1. load any package, e.g `dplyr`

2. use it, e.g `filter(iris, Species == "setosa")`

3. run `rm(list = ls())`

4. try again `filter(iris, Species == "setosa")`

<br>

This will still work, meaning that the package was not unloaded.


## Solution 

<br> <br> 

Instead of using `rm(list = ls())`, you should completely restart the session to
be sure your code can run in a fresh session:

* Session > Restart R;

* or Ctrl + Shift + F10;

* or `rstudioapi::restartSession()`.


# Bonus: version control

---
 
If this is familiar...

<div style="text-align: center">
<img src="img/comic-version-control.png" height=500>
</div>

. . .

<p>... you should <span style="font-size: 0.95rem"> (maybe) </span> use version control!</p>


## Version control

<br><br>

Most famous version control tool: [Git](https://git-scm.com/).

<br>

Difference between Git and Github:

* Git: core tool
* Github: web interface that makes it much easier to use Git


## Version control

<br>

Idea: you are able to go back to your project at any point in time.

. . .

<br>

Workflow:

* put your project on a repository

. . .

* write code, write drafts, etc.

. . .

* once in a while (at the end of the day, or after a big coding session), **commit**
and **push** your changes to the repository

. . .

* the repository keeps track of what has changed and allows you to go back to your code at any point in time.


## Personal example

<div style="text-align: center">
<img src="img/git-perso-1.png" height=450>
</div>


## Personal example

<div style="text-align: center">
<img src="img/git-perso-1-messages.png" height=450>
</div>

Commits I made: important to add a useful message (unlike some commits here)



## Personal example

<div style="text-align: center">
<img src="img/git-perso-1-browse.png" height=450>
</div>

Browse the repository when these commits were made (aka time-travel machine).


## Personal example

<div style="text-align: center">
<img src="img/git-perso-1-details.png" width=1400>
</div>


## Version control

<br><br>

Git & Github also very useful for collaborating (if everyone knows how to use it).

<br>

. . .

**But** not easy to learn and takes time to be efficient (maybe a future training?)

<br>

Great resource for Git + Github + R: [https://happygitwithr.com](https://happygitwithr.com){.external target="_blank"}



# Thanks!

<br>

Source code for slides and examples: 

[https://github.com/etiennebacher/good-practices](https://github.com/etiennebacher/good-practices){.external target="_blank"}

<br>

Comments, typos, etc.: 

[https://github.com/etiennebacher/good-practices/issues](https://github.com/etiennebacher/good-practices/issues){.external target="_blank"}
